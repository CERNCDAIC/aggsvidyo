input {
  exec {
      # Simultaneous connections every 15 minutes
      command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/simul_active_sessions.json" 2> /dev/null'
      schedule  => "*/15 * * * *"
      add_field => {"[fields][document_type]" => "vidyoaggsimul"}
  }
  exec {
      # Use of diferent client versions every 15 minutes
      command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/vc_sessions_simul.json" 2> /dev/null'
      schedule  => "*/15 * * * *"
      add_field => {"[fields][document_type]" => "vidyoaggsappsvcsimul"}
  }
  exec {
        # Use of client version of completed calls a long the day, every 30 minutes
	command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/vc_sessions.json" 2> /dev/null'
	schedule  => "*/30 * * * *"
	add_field => {"[fields][document_type]" => "vidyoaggsappsvc"}
  }
  exec {
        # Type of endpoint: vidyoroom, vidyodesktop, guest, legacy, recorded session of completed calls in the day, every 30 minutes
	command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/endpoint_sessions.json" 2> /dev/null'
        schedule  => "*/30 * * * *"
        add_field => {"[fields][document_type]" => "vidyoaggsendpoint"}			
  }
  exec {
        # Type of conference: OS of the client of completed calls in the day, every 30 minutes
        command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/os_sessions.json" 2> /dev/null'
        schedule  => "*/30 * * * *"
        add_field => {"[fields][document_type]" => "vidyoaggsos"}
  }
  exec {
        # Type of conference: D direct, C conference call,.. completed calls in the day, every 30 minutes
        command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/total_sessions.json" 2> /dev/null'
        schedule  => "*/30 * * * *"
        add_field => {"[fields][document_type]" => "vidyoaggstypevc"} 
  }
  exec {
        # Stats on session duration once a day 
        command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/duration_sessions.json" 2> /dev/null'
        schedule  => "50 23 * * *"
        add_field => {"[fields][document_type]" => "vidyoaggsduration"}
  }
  exec {
	# Stats of meetings per day at CERN, to be done once a day
	command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/meetings_perday_CERN.json" 2> /dev/null'
	schedule  => "50 23 * * *"
	add_field => {"[fields][document_type]" => "vidyoaggsmeetingperday"}
	tags => ["CERN"]
  }
  exec {
	# Stats of recordings per day at CERN, to be done once a day
	command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/recordings_perday_CERN.json" 2> /dev/null'
        schedule  => "50 23 * * *"
        add_field => {"[fields][document_type]" => "vidyoaggsrecordingperday"}
	tags => ["CERN"]
  }
  exec {
        # Stats of meetings per day at SWITCH, to be done once a day
        command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/meetings_perday_SWITCH.json" 2> /dev/null'
        schedule  => "50 23 * * *"
        add_field => {"[fields][document_type]" => "vidyoaggsmeetingperday"}
  }
  exec {
        # Stats of recordings per day at SWITCH, to be done once a day
        command   => 'curl  -H "Content-Type:application/json" -k  -X GET "https://${SECRET_USERNAME}:${SECRET_PASSWORD}@${SECRET_URLSERVER}/es/collaborativeapps6-vidyocon*/_search?pretty" -d "@/usr/share/logstash/queries/recordings_perday_SWITCH.json" 2> /dev/null'
        schedule  => "50 23 * * *"
        add_field => {"[fields][document_type]" => "vidyoaggsrecordingperday"}
  }

}

filter {
  if ([fields][document_type] == "vidyoaggsrecordingperday") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    if ("CERN" in [tags]) { 
    	ruby {code => "total_sessions=event.get('aggregations[byRecordingsPerDay][value]')
		   my_arr=[];
		   total = {:tenant 	=> 'CERN',
			    :sessions   => total_sessions}
		   my_arr.push(total)
		   event.set('tenant', 'CERN')
		   event.set('recordings_per_day', total_sessions)
		   "

            remove_field => ["aggregations"]
    	}
     } else {
	ruby {code => "total_sessions=event.get('aggregations[byRecordingsPerDay][value]')
                   my_arr=[];
                   total = {:tenant     => 'SWITCH',
                            :sessions   => total_sessions}
                   my_arr.push(total)   
                   event.set('tenant', 'SWITCH')
                   event.set('recordings_per_day', total_sessions)
                   "
                   
            remove_field => ["aggregations"]
        }   	


     }
  }   
  if ([fields][document_type] == "vidyoaggsmeetingperday") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    if "CERN" in [tags] {
    	ruby {code => "total_sessions=event.get('aggregations[byMeetingsPerDay][value]')
		   my_arr=[];
		   total = {:tenant 	=> 'CERN',
			    :sessions   => total_sessions}
		   my_arr.push(total)
		   event.set('tenant', 'CERN')
		   event.set('meetings_per_day', total_sessions)
		   "

            remove_field => ["aggregations"]
    	}
    } else {
	ruby {code => "total_sessions=event.get('aggregations[byMeetingsPerDay][value]')
                   my_arr=[];
                   total = {:tenant     => 'SWITCH',
                            :sessions   => total_sessions}
                   my_arr.push(total)   
                   event.set('tenant', 'SWITCH')
                   event.set('meetings_per_day', total_sessions)
                   "
                   
            remove_field => ["aggregations"]
        }   

    }		
  }  
  if ([fields][document_type] == "vidyoaggsduration") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "my_arr=[];
		   if ! event.get('aggregations[bySessionDuration][buckets]').empty? then
		     event.get('aggregations[bySessionDuration][buckets]').each { |item|
		       h = {:tenant	=> item['key'],
		            :num_sessions	=> item['doc_count'],
			    :summinutes => item['sumofminutes']['value'],
			    :avgminutes => item['avgminutes']['value'],
			    :percentileminutes => item['percentileminutes']['values']
			    }
		     	my_arr.push(h)
		      }	
                   end
		   total = {:tenant 		=> 'ALL',
			    :num_sessions	=> event.get('aggregations[bySessionDuration_records][value]'),
			    :summinutes		=> event.get('aggregations[sumofminutes_total][value]'),
			    :avgminutes		=> event.get('aggregations[avgminutes_total][value]'),
                            :percentileminutes  => event.get('aggregations[percentileminutes_total][values]')
			    }
		   my_arr.push(total)
		   event.set('session_per_tenant', my_arr)
		   "

            remove_field => ["aggregations"]
    }
    split {
             field => "session_per_tenant"
             target =>  "per_sessions"
             remove_field => ["session_per_tenant"]
    }
    mutate {
      rename => {
         "per_sessions[tenant]"  => "tenant"
         "per_sessions[num_sessions]" => "num_sessions"
	 "per_sessions[summinutes]"   => "summinutes"
	 "per_sessions[avgminutes]"   => "avgminutes"
	 "per_sessions[percentileminutes]" => "percentileminutes"
      }
      remove_field => [ "per_sessions"]
    }
  }	

  if ([fields][document_type] == "vidyoaggstypevc") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "total_sessions=event.get('aggregations[byConferenceType_total][value]')
		   my_arr=[];
		   if ! event.get('aggregations[byConferenceType][buckets]').empty? then
		     event.get('aggregations[byConferenceType][buckets]').each { |typeconf|
			(typeconf['perTenant']['buckets']).each { |item| 
		       		h = {:typeconf	=> typeconf['key'],
		            	     :tenant	=> item['key'],
				     :sessions	=> item['doc_count']
			    	    }
				my_arr.push(h)
			}
		      }	
                   end
		   total = {:tenant 	=> 'ALL',
			    :typeconf	=> 'ALL',	
			    :sessions   => total_sessions}
		   my_arr.push(total)
		   event.set('session_per_tenant', my_arr)
		   "

            remove_field => ["aggregations"]
    }
    split {
             field => "session_per_tenant"
             target =>  "per_sessions"
             remove_field => ["session_per_tenant"]
    }
    mutate {
      rename => {
         "per_sessions[tenant]"  => "tenant"
         "per_sessions[sessions]" => "pertype_num_sessions"
	 "per_sessions[typeconf]" => "typeconf"
      }
      remove_field => [ "per_sessions"]
    }

  }	
  if ([fields][document_type] == "vidyoaggsappsvc") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "total_sessions=event.get('aggregations[byApplicationOs_total][value]')
		   my_arr=[];
		   if ! event.get('aggregations[byApplicationName][buckets]').empty? then
		     event.get('aggregations[byApplicationName][buckets]').each { |app|
			(app['perVersion']['buckets']).each { |version|
			   (version['perTenant']['buckets']).each { |item| 
		       		h = {:app	=> app['key'],
				     :appversion=> version['key'],
		            	     :tenant	=> item['key'],
				     :sessions	=> item['doc_count']
			    	    }
				my_arr.push(h)
		            }
			}
		      }	
                   end
		   total = {:app 	=> 'ALL',
			    :appversion	=> 'ALL',	
			    :tenant   => 'ALL',
			    :session  => total_sessions}
		   my_arr.push(total)
		   event.set('session_per_tenant', my_arr)
		   "

            remove_field => ["aggregations"]
    }
    split {
             field => "session_per_tenant"
             target =>  "per_sessions"
             remove_field => ["session_per_tenant"]
    }
    mutate {
      rename => {
         "per_sessions[tenant]"  => "tenant"
         "per_sessions[sessions]" => "app_version_num_sessions"
	 "per_sessions[app]" => "app_client"
	 "per_sessions[appversion]" => "app_client_version"
      }
      remove_field => [ "per_sessions"]
    }

  }  
  if ([fields][document_type] == "vidyoaggsos") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "total_docs=event.get('aggregations[byApplicationOs_total][value]')
                   my_os_list= [];event.get('aggregations[byApplicationOs][buckets]').each { |os|
		      os['perTenant']['buckets'].each { |tenant|
			h = {:os		=> os['key'],
			     :tenant		=> tenant['key'],
			     :value		=> tenant['doc_count']
			    }
                        my_os_list.push(h)
		      }
		   }
		   total = {:os     => 'ALL',
			    :tenant => 'ALL',
			    :value  => total_docs}
		   my_os_list.push(total)
		   event.set('app_per_os_array', my_os_list)
		  "

          remove_field => ["aggregations"]
    }
    split {  
	     field => "app_per_os_array"
             target =>  "per_os"
             remove_field => ["app_per_os_array"]
    }
    mutate {
      rename => {
         "per_os[os]" => "os"
         "per_os[tenant]"  => "tenant"
         "per_os[value]" => "num_session_os"
      }
      remove_field => [ "per_os"]
    }
  }
  if ([fields][document_type] == "vidyoaggsendpoint") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "total_sessions=event.get('aggregations[byEndPointType_total][value]')
		   my_arr=[];
		   if ! event.get('aggregations[byEndpointType][buckets]').empty? then
		     event.get('aggregations[byEndpointType][buckets]').each { |typendpoint|
			(typendpoint['perTenant']['buckets']).each { |item| 
		       		h = {:typeconf	=> typendpoint['key'],
		            	     :tenant	=> item['key'],
				     :sessions	=> item['doc_count']
			    	    }
				my_arr.push(h)
			}
		      }	
                   end
		   total = {:tenant 	=> 'ALL',
			    :typendpoint	=> 'ALL',	
			    :sessions   => total_sessions}
		   my_arr.push(total)
		   event.set('session_per_tenant', my_arr)
		   "

            remove_field => ["aggregations"]
    }
    split {
             field => "session_per_tenant"
             target =>  "per_sessions"
             remove_field => ["session_per_tenant"]
    }
    mutate {
      rename => {
         "per_sessions[tenant]"  => "tenant"
         "per_sessions[sessions]" => "pertype_endpoint_sessions"
	 "per_sessions[typeconf]" => "typendpoint"
      }
      remove_field => [ "per_sessions"]
    }

  }	
  if ([fields][document_type] == "vidyoaggsimul") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "total_sessions=event.get('aggregations[byTenantName_total][value]')
		   my_arr=[];
		   if ! event.get('aggregations[byTenantName][buckets]').empty? then
		     event.get('aggregations[byTenantName][buckets]').each { |item|
		       h = {:tenant	=> item['key'],
		            :sessions	=> item['doc_count']
			    }
		     	my_arr.push(h)
		      }	
                   end
		   total = {:tenant 	=> 'ALL',
			    :sessions   => total_sessions}
		   my_arr.push(total)
		   event.set('session_per_tenant', my_arr)
		   "

            remove_field => ["aggregations"]
    }
    split {
             field => "session_per_tenant"
             target =>  "per_sessions"
             remove_field => ["session_per_tenant"]
    }
    mutate {
      rename => {
         "per_sessions[tenant]"  => "tenant"
         "per_sessions[sessions]" => "sim_sessions"
      }
      remove_field => [ "per_sessions"]
    }
  }
  if ([fields][document_type] == "vidyoaggsappsvcsimul") {
    json{ source => "message" 
	  remove_field => ["message", "host", "command", "hits", "_shards", "took", "timeout", "timed_out", "@version"]
    }
    ruby {code => "total_sessions=event.get('aggregations[byApplicationOs_total][value]')
		   my_arr=[];
		   if ! event.get('aggregations[byApplicationName][buckets]').empty? then
		     event.get('aggregations[byApplicationName][buckets]').each { |app|
			(app['perVersion']['buckets']).each { |version|
			   (version['perTenant']['buckets']).each { |item| 
		       		h = {:app	=> app['key'],
				     :appversion=> version['key'],
		            	     :tenant	=> item['key'],
				     :sessions	=> item['doc_count']
			    	    }
				my_arr.push(h)
		            }
			}
		      }	
                   end
		   total = {:app 	=> 'ALL',
			    :appversion	=> 'ALL',	
			    :tenant   => 'ALL',
			    :sessions  => total_sessions}
		   my_arr.push(total)
		   event.set('session_per_tenant', my_arr)
		   "

            remove_field => ["aggregations"]
    }
    split {
             field => "session_per_tenant"
             target =>  "per_sessions"
             remove_field => ["session_per_tenant"]
    }
    mutate {
      rename => {
         "per_sessions[tenant]"  => "tenant"
         "per_sessions[sessions]" => "app_version_num_sessions"
	 "per_sessions[app]" => "app_client"
	 "per_sessions[appversion]" => "app_client_version"
      }
      remove_field => [ "per_sessions"]
    }
  }
	
}

output {
  if ([fields][document_type] =~ /vidyoagg/) {
    if "_grokparsefailure" not in [tags] {
        elasticsearch {
          hosts           => ["https://${SECRET_URLSERVER}:9203"]
          user            => "${SECRET_USERNAME}"
          password        => "${SECRET_PASSWORD}"
          manage_template => false
          index           => "collaborativeapps6-%{[fields][document_type]}-%{+YYYY.MM}"
          document_type   => "collaborativeapps6-%{[fields][document_type]}"
          #document_id     => "simsessions-%{[tenant]}-%{+YYYY.MM.dd}"
          doc_as_upsert   => true
	  cacert	  => "/usr/share/logstash/cacerts/CERN Grid Certification Authority.crt"
	  ssl_certificate_verification => true

        }
    } else {
        elasticsearch {
          hosts           => ["https://${SECRET_URLSERVER}:9203"]
          user            => "${SECRET_USERNAME}"
          password        => "${SECRET_PASSWORD}"
          manage_template => false
          index           => "collaborativeapps6-nomatch-%{[fields][document_type]}-%{+YYYY.MM}"
          document_type   => "collaborativeapps6-%{[fields][document_type]}"
	  cacert          => "/usr/share/logstash/cacerts/CERN Grid Certification Authority.crt"
	  ssl_certificate_verification => true
        }
    }
  }

  stdout {
    codec => rubydebug
  }
}
